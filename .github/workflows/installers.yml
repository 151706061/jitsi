name: Installers

on: [push, pull_request]

env:
  # Java version to use in the Jitsi Desktop jars
  INSTALLER_JAVA_VERSION: 11

jobs:
  version:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      jitsi_version_major: ${{ steps.parse.outputs.jitsi_version_major }}
      jitsi_version_minor: ${{ steps.parse.outputs.jitsi_version_minor }}
      jitsi_version_suffix: ${{ steps.parse.outputs.jitsi_version_suffix }}
      jitsi_version_git: ${{ steps.parse.outputs.jitsi_version_git }}
      jitsi_version_ncommits: ${{ steps.parse.outputs.jitsi_version_ncommits }}
      jitsi_version_hash: ${{ steps.parse.outputs.jitsi_version_hash }}
      jitsi_version_short: ${{ steps.parse.outputs.jitsi_version_short }}
      jitsi_version_full: ${{ steps.parse.outputs.jitsi_version_full }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Parse version
        id: parse
        run: |
          MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          MVNVER_MATCHER="^([0-9]+)\.([0-9]+)(\.([0-9]+))?(\.([0-9]+))?(-([A-Za-z0-9-]+))?"
          if [[ $MVNVER =~ $MVNVER_MATCHER ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            SUFFIX=${BASH_REMATCH[8]}
            echo "${MAJOR}"
            echo "${MINOR}"
            echo "${SUFFIX}"
            echo "::set-output name=jitsi_version_major::${MAJOR}"
            echo "::set-output name=jitsi_version_minor::${MINOR}"
            echo "::set-output name=jitsi_version_suffix::${SUFFIX}"
          else
            echo "$MVNVER did not match $MVNVER_MATCHER"
            exit 1
          fi;

          GITVER=`git describe --match Jitsi-[0-9.]* --long --dirty --always`
          echo "${GITVER}"
          echo "::set-output name=jitsi_version_git::${GITVER}"
          GITVER_MATCHER="^((Jitsi-[0-9.]+)-([0-9]+)-)?([A-Za-z0-9-]+)$"
          if [[ $GITVER =~ $GITVER_MATCHER ]]; then
            NCOMMITS=${BASH_REMATCH[3]}
            HASH=${BASH_REMATCH[4]}
            echo "${NCOMMITS}"
            echo "${HASH}"
            echo "::set-output name=jitsi_version_ncommits::${NCOMMITS}"
            echo "::set-output name=jitsi_version_hash::${HASH}"
          else
            echo "$GITVER did not match $GITVER_MATCHER"
            exit 1
          fi;

          VERSION_SHORT="${MAJOR}.${MINOR}.${NCOMMITS}"
          if [[ "$SUFFIX" == "" ]]; then
            VERSION_FULL="${VERSION_SHORT}+${HASH}"
          else
            VERSION_FULL="${VERSION_SHORT}-${SUFFIX}+${HASH}"
          fi;
          echo "${VERSION_SHORT}"
          echo "${VERSION_FULL}"
          echo "::set-output name=jitsi_version_short::${VERSION_SHORT}"
          echo "::set-output name=jitsi_version_full::${VERSION_FULL}"

  deb:
    name: Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # for version in CMake
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=gcc_arch::-m32"
            echo "::set-output name=ubuntu_arch::i386"
          else
            echo "::set-output name=gcc_arch::-m64"
            echo "::set-output name=ubuntu_arch::amd64"
          fi;

      - name: Build natives
        env:
          CFLAGS: ${{ steps.expand_arch.outputs.gcc_arch }}
          CXXFLAGS: ${{ steps.expand_arch.outputs.gcc_arch }}
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo dpkg --add-architecture ${{ steps.expand_arch.outputs.ubuntu_arch }}
          sudo apt-get update && sudo apt-get install -y \
            g++-multilib \
            gcc-multilib \
            libdbus-1-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxss-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxtst-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libgtk2.0-dev:${{ steps.expand_arch.outputs.ubuntu_arch }}
          cd $GITHUB_WORKSPACE/native
          cmake -B cmake-build -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }}
          cmake --build cmake-build --config Release --target install

      - name: Build deb
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PW }}
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon signDeb -Papplication.target=${{ matrix.arch }} -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload deb
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-debian-${{ matrix.arch }}
          path: resources/install/build/distributions/

  wix:
    name: Windows ${{ matrix.arch }}
    runs-on: windows-latest
    needs: version
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=cmake_arch::Win32"
          else
            echo "::set-output name=cmake_arch::x64"
          fi;

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # for version in CMake
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        shell: cmd
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Prepare SDK Download
        run: |
          echo ${{ secrets.PRIVATE_SDK_KEY }} > ~/.ssh/private-sdk
          echo Host privatesdk >> ~/.ssh/config
          echo User git >> ~/.ssh/config
          echo Hostname github.com >> ~/.ssh/config
          echo IdentityFile ~/.ssh/private-sdk >> ~/.ssh/config

      - name: Build natives
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-${{ matrix.arch }} -A ${{ steps.expand_arch.outputs.cmake_arch }} -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} -DPRIVATE_SDK_REPO=git@privatesdk:jitsi/jitsi-3rdparty-nonredist.git
          cmake --build cmake-build-${{ matrix.arch }} --config Release --target install

      - name: Build Outlook COM Server natives (x86 and x64)
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-x86 -A Win32 -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }}
          cmake --build cmake-build-x86 --config Release --target install.jmsoutlookaddrbookcomserver
          cmake -B cmake-build-x64 -A x64 -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }}
          cmake --build cmake-build-x64 --config Release --target install.jmsoutlookaddrbookcomserver
          cd %GITHUB_WORKSPACE%
          copy lib\native\windows-x64\jmsoutlookaddrbookcomserver64.exe lib\native\windows-x86\jmsoutlookaddrbookcomserver64.exe
          copy lib\native\windows-x86\jmsoutlookaddrbookcomserver32.exe lib\native\windows-x64\jmsoutlookaddrbookcomserver32.exe

      - name: Upload CMake logs on failure
        if: ${{ failure() }}
        run: Compress-Archive -Path $Env:GITHUB_WORKSPACE/native/windows/src/native/cmake-build-${{ matrix.arch}} -DestinationPath $Env:GITHUB_WORKSPACE/debug-logs.zip

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: win-${{ matrix.arch }}-debug
          path: debug*

      - name: Build installer
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon windowsZip signMsi -Papplication.target=${{ matrix.arch }} -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload msi
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-win-${{ matrix.arch }}
          path: |
            resources/install/build/install/wix/jitsi-*.msi
            resources/install/build/distributions/jitsi-*.zip

  mac:
    runs-on: macos-latest
    needs: version
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # for version in CMake
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Build natives
        run: |
          cd $GITHUB_WORKSPACE/native
          cmake -B cmake-build -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }}
          cmake --build cmake-build --config Release --verbose

      - name: Generate dmg
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon createDmg -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload dmg
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-mac
          path: resources/install/build/install/jitsi.dmg
