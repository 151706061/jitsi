name: Installers

on: [push, pull_request]

env:
  # Java version to use in the Jitsi Desktop jars
  INSTALLER_JAVA_VERSION: 11

jobs:
  version:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      jitsi_version_major: ${{ steps.parse.outputs.jitsi_version_major }}
      jitsi_version_minor: ${{ steps.parse.outputs.jitsi_version_minor }}
      jitsi_version_suffix: ${{ steps.parse.outputs.jitsi_version_suffix }}
      jitsi_version_git: ${{ steps.parse.outputs.jitsi_version_git }}
      jitsi_version_ncommits: ${{ steps.parse.outputs.jitsi_version_ncommits }}
      jitsi_version_hash: ${{ steps.parse.outputs.jitsi_version_hash }}
      jitsi_version_short: ${{ steps.parse.outputs.jitsi_version_short }}
      jitsi_version_full: ${{ steps.parse.outputs.jitsi_version_full }}
      jitsi_version_deb: ${{ steps.parse.outputs.jitsi_version_deb }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Parse version
        id: parse
        run: ${{ github.workspace }}/.github/workflows/version.sh

  deb_bin:
    name: Generic deb binary ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Java
        id: install_java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          architecture: ${{ matrix.arch }}
          distribution: zulu

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=gcc_arch::-m32"
            echo "::set-output name=ubuntu_arch::i386"
            echo "::set-output name=pkgconfig_arch::i386"
          else
            echo "::set-output name=gcc_arch::-m64"
            echo "::set-output name=ubuntu_arch::amd64"
            echo "::set-output name=pkgconfig_arch::x86_64"
          fi;

      - name: Build natives
        env:
          CFLAGS: ${{ steps.expand_arch.outputs.gcc_arch }}
          CXXFLAGS: ${{ steps.expand_arch.outputs.gcc_arch }}
          DEBIAN_FRONTEND: noninteractive
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
          PKG_CONFIG_PATH: /usr/lib/${{ steps.expand_arch.outputs.pkgconfig_arch }}-linux-gnu/pkgconfig/
        run: |
          sudo dpkg --add-architecture ${{ steps.expand_arch.outputs.ubuntu_arch }}
          sudo apt-get update && sudo apt-get install -y \
            g++-multilib \
            gcc-multilib \
            libdbus-1-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxss-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxtst-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libgtk2.0-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libx11-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxext-dev:${{ steps.expand_arch.outputs.ubuntu_arch }} \
            libxtst-dev:${{ steps.expand_arch.outputs.ubuntu_arch }}
          cd $GITHUB_WORKSPACE/native
          cmake -B cmake-build -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} -DJAVA_HOME=${{ steps.install_java.outputs.path }}
          cmake --build cmake-build --config Release --target install

      - name: Build deb
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PW }}
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon buildDeb -Papplication.target=${{ matrix.arch }} -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload deb
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-debian-${{ matrix.arch }}
          path: resources/install/build/distributions/

  deb_src_prepare:
    name: Create local Maven repo
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: adopt

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: debian/maven-repo
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-offlinemaven-

      - name: Prepare go-offline
        run: mvn -B -DskipTests -Dmaven.repo.local=debian/maven-repo de.qaware.maven:go-offline-maven-plugin:1.2.8:resolve-dependencies

  deb_src:
    name: ${{ matrix.vendor }} ${{ matrix.dist }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: [ version, deb_src_prepare ]
    strategy:
      fail-fast: false
      matrix:
        include: [
          { vendor: ubuntu, dist: bionic, arch: i386 },
          { vendor: ubuntu, dist: bionic, arch: amd64 },
          { vendor: ubuntu, dist: focal, arch: amd64 },
          { vendor: ubuntu, dist: groovy, arch: amd64 },
          { vendor: debian, dist: buster, arch: i386 },
          { vendor: debian, dist: buster, arch: amd64 },
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          #for gbp dch
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: adopt

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: debian/maven-repo
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-offlinemaven-

      - name: Prepare go-offline
        run: mvn -B -DskipTests -Dmaven.repo.local=debian/maven-repo de.qaware.maven:go-offline-maven-plugin:1.2.8:resolve-dependencies

      - name: Install dev packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -y
          sudo apt-get install -y binutils ubuntu-dev-tools pbuilder debootstrap debian-archive-keyring git-buildpackage

      - name: Cache pbuilder archive
        uses: actions/cache@v2
        id: deb_cache
        with:
          path: ~/pbuilder/${{ matrix.dist }}*-base.tgz
          key: pbuilder-${{ matrix.dist }}-${{ matrix.arch }}

      - name: Create or update pbuilder base
        id: pbuilder_create
        env:
          UBUNTUTOOLS_UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu
          UBUNTUTOOLS_DEBIAN_MIRROR: http://debian-archive.trafficmanager.net/debian/
          UBUNTUTOOLS_DEBSEC_MIRROR: http://debian-archive.trafficmanager.net/debian-security
        run: |
          if [[ "${{ steps.deb_cache.outputs.cache-hit }}" != "true" ]]; then
            pbuilder-dist ${{ matrix.dist }} ${{ matrix.arch }} create
          else
            pbuilder-dist ${{ matrix.dist }} ${{ matrix.arch }} update
          fi;

      - name: Build deb archive
        env:
          UBUNTUTOOLS_UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu
          UBUNTUTOOLS_DEBIAN_MIRROR: http://debian-archive.trafficmanager.net/debian/
          UBUNTUTOOLS_DEBSEC_MIRROR: http://debian-archive.trafficmanager.net/debian-security
          GPG_PASSPHRASE: "${{ secrets.GPG_PW }}"
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          #SINCE=$(git describe --match "v[0-9\.]*" --abbrev=0)
          export SINCE=6c43def42
          gbp dch \
            --ignore-branch \
            --since $SINCE \
            --meta \
            --release \
            --distribution=${{ matrix.dist }} \
            --force-distribution \
            --spawn-editor=never \
            --new-version=${{ needs.version.outputs.jitsi_version_deb }}~${{ matrix.dist }}
          dpkg-source -I.git -I.idea -b .
          pbuilder-dist ${{ matrix.dist }} ${{ matrix.arch }} build \
            --source-only-changes \
            --debbuildopts --buildinfo-option="-O" \
            --buildresult ~/pbuilder/${{ matrix.vendor }}-${{ matrix.dist }}-${{ matrix.arch }}_result \
            ../jitsi_*.dsc
          cd ~/pbuilder/${{ matrix.vendor }}-${{ matrix.dist }}-${{ matrix.arch }}_result
          debsign -S -edev@jitsi.org *_source.changes --re-sign -p${{ github.workspace }}/.github/workflows/gpg-wrap.sh

      - name: Upload package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.vendor }}-${{ matrix.dist }}-${{ matrix.arch }}
          path: ~/pbuilder/${{ matrix.vendor }}-${{ matrix.dist }}-${{ matrix.arch }}_result/*

  wix:
    name: Windows ${{ matrix.arch }}
    runs-on: windows-latest
    needs: version
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=cmake_arch::Win32"
            echo "::set-output name=cmake_opposite_arch::x64"
          else
            echo "::set-output name=cmake_arch::x64"
            echo "::set-output name=cmake_opposite_arch::Win32"
          fi;

      - name: Checkout
        uses: actions/checkout@v2

      - name: Private SDK Download
        uses: actions/checkout@v2
        with:
          repository: jitsi/jitsi-3rdparty-nonredist
          ssh-key: ${{ secrets.PRIVATE_SDK_KEY }}
          path: build/private-sdk

      - name: Set up Java
        id: install_java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          architecture: ${{ matrix.arch }}
          distribution: zulu

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        shell: cmd
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Build natives
        env:
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-${{ matrix.arch }} -A ${{ steps.expand_arch.outputs.cmake_arch }} ^
            -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} ^
            -DGIT_VERSION=${{ needs.version.outputs.jitsi_version_git }} ^
            -DOCSDK_DIR=%GITHUB_WORKSPACE%\build\private-sdk\ocsdk2007 ^
            -DMAPI_HEADERS_DIR=%GITHUB_WORKSPACE%\build\private-sdk\outlook2010mapi
          cmake --build cmake-build-${{ matrix.arch }} --config Release --target install

      - name: Build Outlook COM Server natives for oppsite arch (${{ steps.expand_arch.outputs.cmake_opposite_arch }})
        env:
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-${{ steps.expand_arch.outputs.cmake_opposite_arch }} -A ${{ steps.expand_arch.outputs.cmake_opposite_arch }} ^
            -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} ^
            -DGIT_VERSION=${{ needs.version.outputs.jitsi_version_git }} ^
            -DOCSDK_DIR=%GITHUB_WORKSPACE%\build\private-sdk\ocsdk2007 ^
            -DMAPI_HEADERS_DIR=%GITHUB_WORKSPACE%\build\private-sdk\outlook2010mapi
          cmake --build cmake-build-${{ steps.expand_arch.outputs.cmake_opposite_arch }} --config Release --target install.jmsoutlookaddrbookcomserver
          cd %GITHUB_WORKSPACE%
          copy lib\native\windows-x64\jmsoutlookaddrbookcomserver64.exe lib\native\windows-x86\jmsoutlookaddrbookcomserver64.exe
          copy lib\native\windows-x86\jmsoutlookaddrbookcomserver32.exe lib\native\windows-x64\jmsoutlookaddrbookcomserver32.exe

      - name: Upload CMake logs on failure
        if: ${{ failure() }}
        run: Compress-Archive -Path $Env:GITHUB_WORKSPACE/native/windows/src/native/cmake-build-${{ matrix.arch}} -DestinationPath $Env:GITHUB_WORKSPACE/debug-logs.zip

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: win-${{ matrix.arch }}-debug
          path: debug*

      - name: Set up Java
        id: install_java_x64
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          architecture: x64
          distribution: adopt

      - name: Build installer
        env:
          JAVA_HOME: ${{ steps.install_java_x64.outputs.path }}
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon --stacktrace windowsZip signMsi -Papplication.target=${{ matrix.arch }} -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload msi
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-win-${{ matrix.arch }}
          path: |
            resources/install/build/install/wix/jitsi-*.msi
            resources/install/build/distributions/jitsi-*.zip

  mac:
    runs-on: macos-latest
    needs: version
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Java
        id: install_java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: adopt

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Build natives
        env:
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
        run: |
          cd $GITHUB_WORKSPACE/native
          cmake -B cmake-build -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }}
          cmake --build cmake-build --config Release --verbose

      - name: Generate dmg
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon createDmg -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload dmg
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-mac
          path: resources/install/build/install/jitsi.dmg

  release:
    if: github.ref == 'refs/heads/new-build'
    needs: [ version, deb_src ]
    runs-on: ubuntu-latest
    steps:
      - name: Install dput
        run: |
          sudo apt-get -y install dput

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          path: target

      - name: Push packages to ppa and Cloudsmith
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          REPO_NAME="jitsi-desktop-snapshots"
          #if [ "${{ github.ref }}" == "refs/heads/new-build" ]; then
          #  REPO_NAME="jitsi-desktop"
          #fi;
          cd target
          for dist in */ ; do
            if [[ "$dist" =~ ^(debian|ubuntu)- ]]; then
              IFS='-' read -r -a triplet <<< "${dist/\//}"
              # source only upload to ppa
              if [[ "${triplet[0]}" == "ubuntu" && "${triplet[2]}" == "amd64" ]]; then
                echo "Upload ${dist}*_source.changes to ppa:jitsi/$REPO_NAME"
                dput ppa:jitsi/$REPO_NAME ${dist}*_source.changes
              fi;
              # upload all architecture-specific binaries to cloudsmith, but only one java-all
              #echo "Upload ${dist}libjitsi-jni_*.deb to Cloudsmith"
              #cloudsmith push deb jitsi/$REPO_NAME/${triplet[0]}/${triplet[1]} ${dist}libjitsi-jni_*.deb
              #if [[ "${triplet[2]}" == "amd64" ]]; then
              #  echo "Upload ${dist}jitsi_*_all.deb to Cloudsmith"
              #  cloudsmith push deb jitsi/$REPO_NAME/${triplet[0]}/${triplet[1]} ${dist}jitsi_*_all.deb
              #fi;
            fi;
          done;
