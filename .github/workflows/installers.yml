name: Installers

on: [push, pull_request]

env:
  # Java version to use in the Jitsi Desktop jars
  INSTALLER_JAVA_VERSION: 11

jobs:
  java:
    name: Build Java
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1.2.0

      - name: Show version
        run: git describe --match "Jitsi-[0-9\.]*" --long --dirty --always

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java source with Maven
        run: |
          mvn -B package -DskipTests

      - name: Upload jars for installers
        uses: actions/upload-artifact@v2
        with:
          name: jars
          path: |
            target/bundles/*.jar
            target/launcher-classpath

  deb:
    name: Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: java
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v1.2.0

      - name: Get jars
        uses: actions/download-artifact@v2
        with:
          name: jars
          path: target

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Set Gradle version
        run: |
          MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          cd resources/install
          sed -i s/^version=.*/version=$MVNVER/ gradle.properties

      - name: Build deb
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PW }}
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon signDeb -Papplication.target=${{ matrix.arch }}

      - name: Upload deb
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-debian-${{ matrix.arch }}
          path: resources/install/build/distributions/

  wix:
    name: Windows ${{ matrix.arch }}
    runs-on: windows-latest
    needs: java
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=cmake_arch::Win32"
          else
            echo "::set-output name=cmake_arch::x64"
          fi;

      - name: Checkout
        uses: actions/checkout@v1.2.0

      - name: Get jars
        uses: actions/download-artifact@v2
        with:
          name: jars
          path: target

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Set Gradle version
        shell: bash
        run: |
          MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          cd resources/install
          sed -i s/^version=.*/version=$MVNVER/ gradle.properties

      - name: Build natives
        run: |
          cd $Env:GITHUB_WORKSPACE/native/windows
          cmake -B cmake-build-${{ matrix.arch }} -A ${{ steps.expand_arch.outputs.cmake_arch }}
          cmake --build cmake-build-${{ matrix.arch }} --config Release

      - name: Upload CMake logs on failure
        if: ${{ failure() }}
        run: Compress-Archive -Path $Env:GITHUB_WORKSPACE/native/windows/src/native/cmake-build-${{ matrix.arch}} -DestinationPath $Env:GITHUB_WORKSPACE/debug-logs.zip

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: win-${{ matrix.arch }}-debug
          path: debug*

      - name: Build installer
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon -Papplication.target=${{ matrix.arch }} signMsi

      - name: Upload msi
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-win-${{ matrix.arch }}
          path: resources/install/build/install/wix/setup.msi

  mac:
    runs-on: macos-latest
    needs: java
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Get jars
        uses: actions/download-artifact@v2
        with:
          name: jars
          path: target

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Set Gradle version
        run: |
          MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          cd resources/install
          sed -i '' s/^version=.*/version=$MVNVER/ gradle.properties

      - name: Build natives
        run: |
          cd $GITHUB_WORKSPACE/native/macosx
          cmake -B cmake-build
          cmake --build cmake-build --config Release --verbose

      - name: Build with Gradle
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon createDmg

      - name: Upload dmg
        uses: actions/upload-artifact@v2
        with:
          name: jitsi-mac
          path: resources/install/build/install/jitsi.dmg
